generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
}

model Event {
  id          String     @id @default(uuid())
  title       String
  topic       EventTopic
  description String?
  startDate   DateTime
  endDate     DateTime
  longitude   Float
  latitude    Float
  placeName   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  submissions Submission[]

  tasks Task[]
}

model School {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  volunteers   Volunteer[]
  coordinators Coordinator[]
}

model Volunteer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  birthdate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  submissions Submission[]
  tasks       Task[]
}

model Submission {
  id        String           @id @default(uuid())
  status    SubmissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
  volunteerId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  @@unique([volunteerId, eventId])
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
  volunteerId String?
}

model Coordinator {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?
}

enum EventTopic {
  ANIMALS
  CHILDREN
  ENVIRONMENT
  ELDERLY
  HEALTH
  EDUCATION
  COMMUNITY
  TECH
  OTHER
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}
